/* eslint-disable no-console */
import Container from '@mui/material/Container'
import AppBar from '~/components/AppBar/AppBar'
import BoardBar from '~/pages/Boards/BoardBar/BoardBar'
import BoardContent from './BoardContent/BoardContent'
import { mapOrder } from '~/utils/sorts'
import CircularProgress from '@mui/material/CircularProgress'

// import { mockData } from '~/apis/mock-data'
import { useEffect, useState } from 'react'
import { fetchBoardDetailsAPI, createNewColumnAPI, createNewCardAPI, updateBoardDetailsAPI, updateColumnDetailsAPI, moveCardToDifferentColumnAPI } from '~/apis'
import { generatePlaceholderCard } from '~/utils/formatters'
import { isEmpty } from 'lodash'
import { Box, Typography } from '@mui/material'

function Board() {
    const [board, setboard] = useState(null)

    useEffect(() => {
        // t·∫°m th·ªùi fix c·ª©ng boardId, flow chu·∫©n ch√≠nh v·ªÅ sau s·∫ª s·ª≠ d·ª•ng react-router-dom ƒë·ªÉ l·∫•y chu·∫©n boardId t·ª´ URL v·ªÅ
        const boardId = '68022a4d1ee2200940a8d59c'
        // call API
        fetchBoardDetailsAPI(boardId).then((board) => {

            // x·∫Øp x·∫øp th·ª© t·ª± c√°c column lu√¥n ·ªü ƒë√¢y tr∆∞·ªõc khi ƒë∆∞a d·ªØ li·ªÖu xu·ªëng b√™n d∆∞·ªõi c√°c component con
            board.columns = mapOrder(board?.columns, board.columnOrderIds, '_id')

            board.columns.forEach(column => {
                if (isEmpty(column.cards)) {
                    column.cards = [generatePlaceholderCard(column)]
                    column.cardOrderIds = [generatePlaceholderCard(column)._id]
                } else {
                    // x·∫Øp x·∫øp th·ª© t·ª± c√°c card lu√¥n ·ªü ƒë√¢y trong column tr∆∞·ªõc khi ƒë∆∞a d·ªØ li·ªÖu xu·ªëng b√™n d∆∞·ªõi c√°c component con
                    column.cards = mapOrder(column.cards, column.cardOrderIds, '_id')
                }
            })
            setboard(board)
        })
    }, [])

    // function n√†y c√≥ nhi·ªám v·ª• g·ªçi API t·∫°o m·ªõi column v√† l√†m l·∫°i d·ªØ li·ªáu stateBoard
    const createNewColumn = async (newColumnData) => {
        const createdColumn = await createNewColumnAPI({
            ...newColumnData,
            boardId: board._id
        })

        createdColumn.cards = [generatePlaceholderCard(createdColumn)]
        createdColumn.cardOrderIds = [generatePlaceholderCard(createdColumn)._id]

        // cap nh·∫≠t l·∫°i state board
        // ph√≠a FE ch√∫ng ta ph·∫£i t·ª± l√†m ƒë√∫ng l·∫°i state data board (thay v√¨ ph·∫£i g·ªçi l·∫°i API fetchBoardDetailsAPI)
        // l∆∞u √Ω : c√°ch l√†m n√†y ph·ª• thu·ªôc v√†o t√πy l·ª±a ch·ªçn v√† ƒë·∫∑c th√π d·ª± √°n, c√≥ n∆°i th√¨ BE s·∫ª h·ªï tr·ª£ tr·∫£ v·ªÅ lu√¥n d·ªØ li·ªáu to√†n b·ªô board
        // d√π ƒë·∫•y c√≥ l√† api t·∫°o column hay card ƒëi chƒÉng n·ªØa => l√∫c n√†y Fe s·∫ª nh√†n h∆°n
        const newBoard = { ...board }
        newBoard.columns.push(createdColumn)
        newBoard.columnOrderIds.push(createdColumn._id)
        setboard(newBoard)
    }

    // function n√†y c√≥ nhi·ªám v·ª• g·ªçi API t·∫°o m·ªõi card v√† l√†m l·∫°i d·ªØ li·ªáu stateBoard
    const createNewCard = async (newCardData) => {
        const createdCard = await createNewCardAPI({
            ...newCardData,
            boardId: board._id
        })

        // cap nh·∫≠t l·∫°i state board
        // ph√≠a FE ch√∫ng ta ph·∫£i t·ª± l√†m ƒë√∫ng l·∫°i state data board (thay v√¨ ph·∫£i g·ªçi l·∫°i API fetchBoardDetailsAPI)
        // l∆∞u √Ω : c√°ch l√†m n√†y ph·ª• thu·ªôc v√†o t√πy l·ª±a ch·ªçn v√† ƒë·∫∑c th√π d·ª± √°n, c√≥ n∆°i th√¨ BE s·∫ª h·ªï tr·ª£ tr·∫£ v·ªÅ lu√¥n d·ªØ li·ªáu to√†n b·ªô board
        // d√π ƒë·∫•y c√≥ l√† api t·∫°o column hay card ƒëi chƒÉng n·ªØa => l√∫c n√†y Fe s·∫ª nh√†n h∆°n

        const newBoard = { ...board }
        const columnToUpdate = newBoard.columns.find(column => column._id === createdCard.columnId)
        if (columnToUpdate) {

            if (columnToUpdate.cards.some(card => card.FE_PlaceholderCard)) {
                columnToUpdate.cards = [createdCard]
                columnToUpdate.cardOrderIds = [createdCard._id]
            } else {
                columnToUpdate.cards.push(createdCard)
                columnToUpdate.cardOrderIds.push(createdCard._id)
            }
        }
        console.log('üöÄ ~ createNewCard ~ columnToUpdate:', columnToUpdate)
        setboard(newBoard)
    }

    /**
     * function n√†y c√≥ nhi·ªám v·ª• g·ªçi API v√† x·ªØ l√Ω khi k√©o th·∫£ column xong xu√¥i
     * ch·ªâ c·∫ßn g·ªçi API ƒë·ªÉ c·∫≠p nh·∫≠t m·∫£ng ph√≠a columnOrderIds c·ªßa board ch·ª©a n√≥
    */
    const moveColumns = (dndOrderedColumns) => {
        // c·∫≠p nh√¢tj l·∫°i cho chu·∫©n
        const dndOrderedColumnsIds = dndOrderedColumns.map(c => c._id)
        const newBoard = { ...board }
        newBoard.columns = dndOrderedColumns
        newBoard.columnOrderIds = dndOrderedColumnsIds
        setboard(newBoard)

        // g·ªçi API c·∫≠p nh·∫≠t l·∫°i th·ª© t·ª± column
        updateBoardDetailsAPI(newBoard._id, { columnOrderIds: dndOrderedColumnsIds })
    }

    /**
     * function n√†y c√≥ nhi·ªám v·ª• g·ªçi API v√† x·ªØ l√Ω khi k√©o th·∫£ card xong xu√¥i
     * ch·ªâ c·∫ßn g·ªçi API ƒë·ªÉ c·∫≠p nh·∫≠t m·∫£ng ph√≠a cardOrderIds c·ªßa board ch·ª©a n√≥
    */
    const moveCardInTheSameColumn = (dndOrderedCards, dndOrderedCardIds, columnId) => {
        // c·∫≠p nh√¢tj l·∫°i cho chu·∫©n
        const newBoard = { ...board }
        const columnToUpdate = newBoard.columns.find(column => column._id === columnId)
        if (columnToUpdate) {
            columnToUpdate.cards = dndOrderedCards
            columnToUpdate.cardOrderIds = dndOrderedCardIds
        }
        setboard(newBoard)

        // g·ªçi API c·∫≠p nh·∫≠t l·∫°i th·ª© t·ª± column
        updateColumnDetailsAPI(columnId, { cardOrderIds: dndOrderedCardIds })
    }

    if (!board) {
        return (
            <Box sx={{
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                gap: 2,
                width: '100nw',
                height: '100vh'
            }}>
                <CircularProgress />
                <Typography>Loading Board....</Typography>
            </Box>
        )
    }

    /**
     * khi di chuy·ªÉn card sang column kh√°c
     * B1: c·∫≠p nh·∫•t m·∫£ng cardOrderIds c·ªßa column ban ƒë·∫ßu ch·ª©a n√≥ (nghƒ©a l√† X√≥a c√°i _id c·ªßa card ƒë√≥ ra kh·ªèi m·∫£ng)
     * B2: c·∫≠p nh·∫•t m·∫£ng cardOrderIds c·ªßa column ti·∫øp theo (nghƒ©a l√† th√™m _id c·ªßa card v√†o m·∫£ng)
     * B3: c·∫≠p nh·∫≠t l·∫°i tr∆∞·ªùng columnId m·ªõi c·ªßa c√°i card ƒë√£ k√©o
     * => l√†m 1 API support ri√™ng cho vi·ªác n√†y
     */
    const moveCardToDifferentColumn = (currentCardId, prevColumnId, nextColumnId, dndOrderedColumns ) => {

        // c·∫≠p nh√¢tj l·∫°i cho chu·∫©n
        const dndOrderedColumnsIds = dndOrderedColumns.map(c => c._id)
        const newBoard = { ...board }
        newBoard.columns = dndOrderedColumns
        newBoard.columnOrderIds = dndOrderedColumnsIds
        setboard(newBoard)

        let prevCardOrderIds = dndOrderedColumns.find(c => c._id === prevColumnId)?.cardOrderIds
        // x·ªØ l√Ω v·∫•n ƒë·ªÅ khi k√©o ph·∫ßn t·ª≠ card cu·ªëi c√πng ra kh·ªèi column, column r·ªïng s·∫ª c√≥ placeholder-card s·∫ª b·ªã x√≥a ƒëi v√† thay th·∫ø b·∫±ng m·∫£ng r·ªïng
        if (prevCardOrderIds[0].includes('placeholder-card')) prevCardOrderIds = []

        // g·ªçi API x·ªØ l√Ω ph√°i BE
        moveCardToDifferentColumnAPI({
            currentCardId,
            prevColumnId,
            prevCardOrderIds,
            nextColumnId,
            nextCardOrderIds: dndOrderedColumns.find(c => c._id === nextColumnId)?.cardOrderIds
        })
    }

    return (
        <Container disableGutters maxWidth={false} sx ={ { height: '100vh' } }>

            <AppBar />

            <BoardBar board={ board} />

            <BoardContent
                board={ board}
                createNewColumn={ createNewColumn }
                createNewCard={ createNewCard }
                moveColumns = {moveColumns}
                moveCardInTheSameColumn= {moveCardInTheSameColumn}
                moveCardToDifferentColumn = {moveCardToDifferentColumn}
            />

        </Container>
    )
}

export default Board
